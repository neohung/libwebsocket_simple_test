// Generated by CoffeeScript 1.8.0
(function() {
  var Encryptor, KEY, LOCAL_ADDRESS, METHOD, PORT, WebSocket, WebSocketServer, config, configContent, configFile, configFromArgs, fs, http, inetNtoa, k, net, options, parseArgs, path, server, timeout, v, wss, _ref;

  net = require("net");

  fs = require("fs");

  path = require("path");

  http = require("http");

  WebSocket = require('ws');

  WebSocketServer = WebSocket.Server;

  parseArgs = require("minimist");

  Encryptor = require("./encrypt").Encryptor;

  setInterval(function() {
    if (global.gc) {
      return gc();
    }
  }, 1000);

  server = http.createServer(function(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    return res.end("asdf.");
  });

  wss = new WebSocketServer({
    server: server
  });

 wss.on("connection", function(ws) {
    console.log("server connected");
    console.log("concurrent connections:", wss.clients.length);
	 ws.on("message", function(data, flags) {
	 	console.log("Receive: "+data);
		if (ws.readyState === WebSocket.OPEN) {
              		ws.send(data, {
                		binary: false
              		});
		}
	});
   ws.on("close", function() {
      console.log("server disconnected");
      console.log("concurrent connections:", wss.clients.length);
    });
 });

  server.listen(process.env.OPENSHIFT_NODEJS_PORT, process.env.OPENSHIFT_NODEJS_IP, function() {
    var address;
    address = server.address();
    return console.log("server listening at", address);
  });

  server.on("error", function(e) {
    if (e.code === "EADDRINUSE") {
      console.log("address in use, aborting");
    }
    return process.exit(1);
  });

}).call(this);
